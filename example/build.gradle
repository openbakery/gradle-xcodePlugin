/*

If you what to create a for the device than you have to specify for sign sign settings.
Create a gradle.properties and add the following values: 

	hockeyappApiToken = ""
	hockeyappAppId = ""

	signingIdentity = iPhone Developer: ... 
	signingCertificateURI = http://.../Development.p12  // file:// urls also works here
	signingCertificatePassword = password // password to unlock to p12
	signingMobileProvisionURI = http://../Development.mobileprovision
	
	signingMobileProvisionURIWidget = http://../Development.mobileprovision // provisioning profil for the widget
	exampleTodayWidgetBundleIdentifier = com.example.MyWidget
	
You can also scroll down and add the values directly (line 115ff).

*/


buildscript {
	repositories {
		maven {
			//url('http://openbakery.org/repository/')
			url uri('/Users/rene/workspace/openbakery/xcodePlugin/repository')
		}
		mavenCentral()
	}
	dependencies {
		classpath group: 'org.openbakery', name: 'xcodePlugin', version: '0.10.+'
	}
}



/*
	Create custom tasks that 4 different kind of builds
*/

task deviceBuild(dependsOn: ':Example:xcodebuild') {
}

task deviceArchive(dependsOn: ':Example:archive') {
}




task continuous(dependsOn:':Example:test') {
	description = 'Builds the app and runs all unit test in the Simulator for the iPhone and iPad'
}

task integration(dependsOn: [':Example:xcodebuild', ':Example:package']) {
	description = 'Performs a build for the device and the resulting ipa is published using hockeyapp'
}
task release(dependsOn: ':Example:package') {
	description = 'Performs a build for the device that has the same configuration as the AppStore build, but it is signed using the developer certificate'
}

task publish(dependsOn: ':Example:package') {
	description = 'Build for the AppStore'
}

task signWidget(dependsOn: ':Example:package') {
	description = 'Build widget'
}



subprojects {
	apply plugin: 'xcode'


	xcodebuild {
		//version = "6A1052d"  // uncomment this if you want to use xcode 6.1, but another xcode is the default on your machine

		target = 'Example'
		scheme = 'Example'

		configuration = 'Debug'

		sdk = 'iphonesimulator'

	}



gradle.taskGraph.whenReady { taskGraph ->


	if (taskGraph.hasTask(deviceBuild) || taskGraph.hasTask(deviceArchive)) {
		println "Configure Device build"
		xcodebuild {
			sdk = 'iphoneos'
		}
	}


	// ------------------------------------------------------------------------------------------

	if (taskGraph.hasTask(continuous) || taskGraph.hasTask(test)) {
		println "Configure device settings for the continuous and test build"
	
		println "CONFIGURE INTEGRATION"
		xcodebuild {
			
			destination {
				platform = 'iOS Simulator'
				name = 'iPad 2'
				os='8.*'
			}
			destination {
				platform = 'iOS Simulator'
				name = 'iPhone 4s'
				os='8.*'
			}
			
		}
	}

	// ------------------------------------------------------------------------------------------

	if (taskGraph.hasTask(integration)) {
		println "Configure the hockey app settings, and also modify the bundle identifier for the integration build"
	
		hockeyapp {
			apiToken = hockeyappApiToken
			appID = hockeyappAppId
		}
		
		/*
		infoplist {
			bundleIdentifier = 'org.openbakery.Example-Test'
		}
		*/
	}

	// ------------------------------------------------------------------------------------------
	
	
	if (taskGraph.hasTask(integration) || taskGraph.hasTask(release)) {
		println "Configure sign settings for the integration and release build"
		xcodebuild {
			sdk = 'iphoneos'
			signing {
				identity = signingIdentity                       // e.g. 'iPhone Developer: ...
				certificateURI = signingCertificateURI           // e.g 'http://example.com/Provisioning/Development.p12'
				certificatePassword = signingCertificatePassword // e.g. 'secret'
				mobileProvisionURI = [ signingMobileProvisionURI , signingMobileProvisionURIWidget ]  // e.g 'http://example.com/Provisioning/Development.mobileprovision'
			}
		}
	}
	
	// ------------------------------------------------------------------------------------------

	if (taskGraph.hasTask(release) || taskGraph.hasTask(publish)) {
		println "Configure build settings for release or appstore"
		xcodebuild {
			configuration = 'Release'
			sdk = 'iphoneos'
		}
		infoplist {
			bundleIdentifier = 'org.openbakery.Example'
		}
	}
	

	if (taskGraph.hasTask(publish)) {
		println "Configure sign settings for the appstore build"
		xcodebuild {
			signing {
				identity = gradle.identity                       // e.g. 'iPhone Developer: ...'
				certificateURI = gradle.certificateURI           // e.g 'http://example.com/Provisioning/Development.p12'
				certificatePassword = gradle.certificatePassword // e.g. 'secret'
				mobileProvisionURI = gradle.mobileProvisionURI   // e.g 'http://example.com/Provisioning/Development.mobileprovision'
			}
		}
	}
}

}
